// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using OpenScience.Data;

namespace OpenScience.Data.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20200121073856_FNIMigration")]
    partial class FNIMigration
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn)
                .HasAnnotation("ProductVersion", "2.2.6-servicing-10079")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            modelBuilder.Entity("OpenScience.Data.Classifications.Models.Classification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<int?>("DefaultAccessRightId")
                        .HasColumnName("defaultaccessrightid");

                    b.Property<int?>("DefaultIdentifierTypeId")
                        .HasColumnName("defaultidentifiertypeid");

                    b.Property<int?>("DefaultLicenseConditionId")
                        .HasColumnName("defaultlicenseconditionid");

                    b.Property<DateTime?>("DefaultLicenseStartDate")
                        .HasColumnName("defaultlicensestartdate");

                    b.Property<int?>("DefaultResourceTypeId")
                        .HasColumnName("defaultresourcetypeid");

                    b.Property<string>("HarvestUrl")
                        .HasColumnName("harvesturl");

                    b.Property<bool>("IsOpenAirePropagationEnabled")
                        .HasColumnName("isopenairepropagationenabled");

                    b.Property<bool>("IsReadonly")
                        .HasColumnName("isreadonly");

                    b.Property<string>("MetadataFormat")
                        .HasColumnName("metadataformat");

                    b.Property<string>("Name")
                        .HasColumnName("name");

                    b.Property<int?>("OrganizationId")
                        .HasColumnName("organizationid");

                    b.Property<int?>("ParentId")
                        .HasColumnName("parentid");

                    b.Property<int>("Version")
                        .IsConcurrencyToken()
                        .HasColumnName("version");

                    b.HasKey("Id");

                    b.HasIndex("DefaultIdentifierTypeId");

                    b.HasIndex("DefaultLicenseConditionId");

                    b.HasIndex("DefaultResourceTypeId");

                    b.HasIndex("OrganizationId");

                    b.HasIndex("ParentId");

                    b.ToTable("classification");
                });

            modelBuilder.Entity("OpenScience.Data.Classifications.Models.ClassificationClosure", b =>
                {
                    b.Property<int>("ChildId")
                        .HasColumnName("childid");

                    b.Property<int>("ParentId")
                        .HasColumnName("parentid");

                    b.HasKey("ChildId", "ParentId");

                    b.HasIndex("ParentId");

                    b.ToTable("classificationclosure");
                });

            modelBuilder.Entity("OpenScience.Data.Emails.Models.Email", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<string>("Body")
                        .HasColumnName("body");

                    b.Property<string>("Subject")
                        .HasColumnName("subject");

                    b.Property<int>("TypeId")
                        .HasColumnName("typeid");

                    b.Property<int>("Version")
                        .IsConcurrencyToken()
                        .HasColumnName("version");

                    b.HasKey("Id");

                    b.HasIndex("TypeId");

                    b.ToTable("email");
                });

            modelBuilder.Entity("OpenScience.Data.Emails.Models.EmailAddressee", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<string>("Address")
                        .HasColumnName("address");

                    b.Property<int>("AddresseeType")
                        .HasColumnName("addresseetype");

                    b.Property<int>("EmailId")
                        .HasColumnName("emailid");

                    b.Property<DateTime>("SentDate")
                        .HasColumnName("sentdate");

                    b.Property<int>("Status")
                        .HasColumnName("status");

                    b.Property<int>("Version")
                        .IsConcurrencyToken()
                        .HasColumnName("version");

                    b.HasKey("Id");

                    b.HasIndex("EmailId");

                    b.ToTable("emailaddressee");
                });

            modelBuilder.Entity("OpenScience.Data.Institutions.Models.Institution", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<string>("Identifier")
                        .HasColumnName("identifier");

                    b.Property<bool>("IsActive")
                        .HasColumnName("isactive");

                    b.Property<string>("Name")
                        .HasColumnName("name");

                    b.Property<string>("RepositoryUrl")
                        .HasColumnName("repositoryurl");

                    b.Property<int>("Version")
                        .IsConcurrencyToken()
                        .HasColumnName("version");

                    b.HasKey("Id");

                    b.ToTable("institution");
                });

            modelBuilder.Entity("OpenScience.Data.Nomenclatures.Models.AccessRight", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<string>("Alias")
                        .HasColumnName("alias");

                    b.Property<bool>("IsActive")
                        .HasColumnName("isactive");

                    b.Property<string>("Name")
                        .HasColumnName("name");

                    b.Property<string>("Uri")
                        .HasColumnName("uri");

                    b.Property<int>("Version")
                        .IsConcurrencyToken()
                        .HasColumnName("version");

                    b.Property<int?>("ViewOrder")
                        .HasColumnName("vieworder");

                    b.HasKey("Id");

                    b.ToTable("accessright");
                });

            modelBuilder.Entity("OpenScience.Data.Nomenclatures.Models.AudienceType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<string>("Alias")
                        .HasColumnName("alias");

                    b.Property<bool>("IsActive")
                        .HasColumnName("isactive");

                    b.Property<string>("Name")
                        .HasColumnName("name");

                    b.Property<int>("Version")
                        .IsConcurrencyToken()
                        .HasColumnName("version");

                    b.Property<int?>("ViewOrder")
                        .HasColumnName("vieworder");

                    b.HasKey("Id");

                    b.ToTable("audiencetype");
                });

            modelBuilder.Entity("OpenScience.Data.Nomenclatures.Models.ContributorType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<string>("Alias")
                        .HasColumnName("alias");

                    b.Property<bool>("IsActive")
                        .HasColumnName("isactive");

                    b.Property<string>("Name")
                        .HasColumnName("name");

                    b.Property<int>("Version")
                        .IsConcurrencyToken()
                        .HasColumnName("version");

                    b.Property<int?>("ViewOrder")
                        .HasColumnName("vieworder");

                    b.HasKey("Id");

                    b.ToTable("contributortype");
                });

            modelBuilder.Entity("OpenScience.Data.Nomenclatures.Models.EmailType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<string>("Alias")
                        .HasColumnName("alias");

                    b.Property<string>("Body")
                        .HasColumnName("body");

                    b.Property<bool>("IsActive")
                        .HasColumnName("isactive");

                    b.Property<string>("Name")
                        .HasColumnName("name");

                    b.Property<string>("Subject")
                        .HasColumnName("subject");

                    b.Property<int>("Version")
                        .IsConcurrencyToken()
                        .HasColumnName("version");

                    b.Property<int?>("ViewOrder")
                        .HasColumnName("vieworder");

                    b.HasKey("Id");

                    b.ToTable("emailtype");
                });

            modelBuilder.Entity("OpenScience.Data.Nomenclatures.Models.Language", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<string>("Alias")
                        .HasColumnName("alias");

                    b.Property<bool>("IsActive")
                        .HasColumnName("isactive");

                    b.Property<string>("Name")
                        .HasColumnName("name");

                    b.Property<int>("Version")
                        .IsConcurrencyToken()
                        .HasColumnName("version");

                    b.Property<int?>("ViewOrder")
                        .HasColumnName("vieworder");

                    b.HasKey("Id");

                    b.ToTable("language");
                });

            modelBuilder.Entity("OpenScience.Data.Nomenclatures.Models.LicenseType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<string>("Alias")
                        .HasColumnName("alias");

                    b.Property<bool>("IsActive")
                        .HasColumnName("isactive");

                    b.Property<string>("Name")
                        .HasColumnName("name");

                    b.Property<string>("Uri")
                        .HasColumnName("uri");

                    b.Property<int>("Version")
                        .IsConcurrencyToken()
                        .HasColumnName("version");

                    b.Property<int?>("ViewOrder")
                        .HasColumnName("vieworder");

                    b.HasKey("Id");

                    b.ToTable("licensetype");
                });

            modelBuilder.Entity("OpenScience.Data.Nomenclatures.Models.NameIdentifierScheme", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<bool>("IsActive")
                        .HasColumnName("isactive");

                    b.Property<string>("Name")
                        .HasColumnName("name");

                    b.Property<string>("Uri")
                        .HasColumnName("uri");

                    b.Property<int>("Version")
                        .IsConcurrencyToken()
                        .HasColumnName("version");

                    b.Property<int?>("ViewOrder")
                        .HasColumnName("vieworder");

                    b.HasKey("Id");

                    b.ToTable("nameidentifierscheme");
                });

            modelBuilder.Entity("OpenScience.Data.Nomenclatures.Models.OrganizationalIdentifierScheme", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<string>("Alias")
                        .HasColumnName("alias");

                    b.Property<bool>("IsActive")
                        .HasColumnName("isactive");

                    b.Property<string>("Name")
                        .HasColumnName("name");

                    b.Property<string>("Uri")
                        .HasColumnName("uri");

                    b.Property<int>("Version")
                        .IsConcurrencyToken()
                        .HasColumnName("version");

                    b.Property<int?>("ViewOrder")
                        .HasColumnName("vieworder");

                    b.HasKey("Id");

                    b.ToTable("organizationalidentifierscheme");
                });

            modelBuilder.Entity("OpenScience.Data.Nomenclatures.Models.RelationType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<string>("Alias")
                        .HasColumnName("alias");

                    b.Property<bool>("IsActive")
                        .HasColumnName("isactive");

                    b.Property<string>("Name")
                        .HasColumnName("name");

                    b.Property<int>("Version")
                        .IsConcurrencyToken()
                        .HasColumnName("version");

                    b.Property<int?>("ViewOrder")
                        .HasColumnName("vieworder");

                    b.HasKey("Id");

                    b.ToTable("relationtype");
                });

            modelBuilder.Entity("OpenScience.Data.Nomenclatures.Models.ResourceIdentifierType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<string>("Alias")
                        .HasColumnName("alias");

                    b.Property<bool>("IsActive")
                        .HasColumnName("isactive");

                    b.Property<string>("Name")
                        .HasColumnName("name");

                    b.Property<int>("Version")
                        .IsConcurrencyToken()
                        .HasColumnName("version");

                    b.Property<int?>("ViewOrder")
                        .HasColumnName("vieworder");

                    b.HasKey("Id");

                    b.ToTable("resourceidentifiertype");
                });

            modelBuilder.Entity("OpenScience.Data.Nomenclatures.Models.ResourceType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<string>("Alias")
                        .HasColumnName("alias");

                    b.Property<bool>("IsActive")
                        .HasColumnName("isactive");

                    b.Property<string>("Name")
                        .HasColumnName("name");

                    b.Property<string>("Uri")
                        .HasColumnName("uri");

                    b.Property<int>("Version")
                        .IsConcurrencyToken()
                        .HasColumnName("version");

                    b.Property<int?>("ViewOrder")
                        .HasColumnName("vieworder");

                    b.HasKey("Id");

                    b.ToTable("resourcetype");
                });

            modelBuilder.Entity("OpenScience.Data.Nomenclatures.Models.ResourceTypeGeneral", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<string>("Alias")
                        .HasColumnName("alias");

                    b.Property<bool>("IsActive")
                        .HasColumnName("isactive");

                    b.Property<string>("Name")
                        .HasColumnName("name");

                    b.Property<int>("Version")
                        .IsConcurrencyToken()
                        .HasColumnName("version");

                    b.Property<int?>("ViewOrder")
                        .HasColumnName("vieworder");

                    b.HasKey("Id");

                    b.ToTable("resourcetypegeneral");
                });

            modelBuilder.Entity("OpenScience.Data.Nomenclatures.Models.TitleType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<string>("Alias")
                        .HasColumnName("alias");

                    b.Property<bool>("IsActive")
                        .HasColumnName("isactive");

                    b.Property<string>("Name")
                        .HasColumnName("name");

                    b.Property<int>("Version")
                        .IsConcurrencyToken()
                        .HasColumnName("version");

                    b.Property<int?>("ViewOrder")
                        .HasColumnName("vieworder");

                    b.HasKey("Id");

                    b.ToTable("titletype");
                });

            modelBuilder.Entity("OpenScience.Data.Publications.Models.Publication", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<int>("AccessRightId")
                        .HasColumnName("accessrightid");

                    b.Property<DateTime?>("CitationConferenceEndDate")
                        .HasColumnName("citationconferenceenddate");

                    b.Property<string>("CitationConferencePlace")
                        .HasColumnName("citationconferenceplace");

                    b.Property<DateTime?>("CitationConferenceStartDate")
                        .HasColumnName("citationconferencestartdate");

                    b.Property<int?>("CitationEdition")
                        .HasColumnName("citationedition");

                    b.Property<int?>("CitationEndPage")
                        .HasColumnName("citationendpage");

                    b.Property<int?>("CitationIssue")
                        .HasColumnName("citationissue");

                    b.Property<int?>("CitationStartPage")
                        .HasColumnName("citationstartpage");

                    b.Property<string>("CitationTitle")
                        .HasColumnName("citationtitle");

                    b.Property<int?>("CitationVolume")
                        .HasColumnName("citationvolume");

                    b.Property<int?>("CreatedByUserId")
                        .HasColumnName("createdbyuserid");

                    b.Property<DateTime?>("EmbargoPeriodEnd")
                        .HasColumnName("embargoperiodend");

                    b.Property<DateTime?>("EmbargoPeriodStart")
                        .HasColumnName("embargoperiodstart");

                    b.Property<string>("Identifier")
                        .HasColumnName("identifier");

                    b.Property<int?>("IdentifierTypeId")
                        .HasColumnName("identifiertypeid");

                    b.Property<DateTime?>("LicenseStartDate")
                        .HasColumnName("licensestartdate");

                    b.Property<int?>("LicenseTypeId")
                        .HasColumnName("licensetypeid");

                    b.Property<int?>("ModeratorInstitutionId")
                        .HasColumnName("moderatorinstitutionid");

                    b.Property<DateTime>("ModificationDate")
                        .HasColumnName("modificationdate");

                    b.Property<string>("OtherLicenseCondition")
                        .HasColumnName("otherlicensecondition");

                    b.Property<string>("OtherLicenseURL")
                        .HasColumnName("otherlicenseurl");

                    b.Property<int?>("PublishDay")
                        .HasColumnName("publishday");

                    b.Property<int?>("PublishMonth")
                        .HasColumnName("publishmonth");

                    b.Property<int>("PublishYear")
                        .HasColumnName("publishyear");

                    b.Property<int?>("ResourceTypeId")
                        .HasColumnName("resourcetypeid");

                    b.Property<string>("ResourceVersion")
                        .HasColumnName("resourceversion");

                    b.Property<string>("ResourceVersionURI")
                        .HasColumnName("resourceversionuri");

                    b.Property<int>("Status")
                        .HasColumnName("status");

                    b.Property<int>("Version")
                        .IsConcurrencyToken()
                        .HasColumnName("version");

                    b.HasKey("Id");

                    b.HasIndex("AccessRightId");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("IdentifierTypeId");

                    b.HasIndex("LicenseTypeId");

                    b.HasIndex("ModeratorInstitutionId");

                    b.HasIndex("ResourceTypeId");

                    b.ToTable("publication");
                });

            modelBuilder.Entity("OpenScience.Data.Publications.Models.PublicationAlternateIdentifier", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<int>("PublicationId")
                        .HasColumnName("publicationid");

                    b.Property<int>("TypeId")
                        .HasColumnName("typeid");

                    b.Property<string>("Value")
                        .HasColumnName("value");

                    b.Property<int>("Version")
                        .IsConcurrencyToken()
                        .HasColumnName("version");

                    b.HasKey("Id");

                    b.HasIndex("PublicationId");

                    b.HasIndex("TypeId");

                    b.ToTable("publicationalternateidentifier");
                });

            modelBuilder.Entity("OpenScience.Data.Publications.Models.PublicationAudience", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<int>("PublicationId")
                        .HasColumnName("publicationid");

                    b.Property<int>("TypeId")
                        .HasColumnName("typeid");

                    b.Property<int>("Version")
                        .IsConcurrencyToken()
                        .HasColumnName("version");

                    b.HasKey("Id");

                    b.HasIndex("PublicationId");

                    b.HasIndex("TypeId");

                    b.ToTable("publicationaudience");
                });

            modelBuilder.Entity("OpenScience.Data.Publications.Models.PublicationClassification", b =>
                {
                    b.Property<int>("PublicationId")
                        .HasColumnName("publicationid");

                    b.Property<int>("ClassificationId")
                        .HasColumnName("classificationid");

                    b.HasKey("PublicationId", "ClassificationId");

                    b.HasIndex("ClassificationId");

                    b.ToTable("publicationclassification");
                });

            modelBuilder.Entity("OpenScience.Data.Publications.Models.PublicationContributor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<string>("FirstName")
                        .HasColumnName("firstname");

                    b.Property<string>("InstitutionAffiliationName")
                        .HasColumnName("institutionaffiliationname");

                    b.Property<string>("LastName")
                        .HasColumnName("lastname");

                    b.Property<int>("NameType")
                        .HasColumnName("nametype");

                    b.Property<int>("PublicationId")
                        .HasColumnName("publicationid");

                    b.Property<int?>("TypeId")
                        .HasColumnName("typeid");

                    b.Property<int>("Version")
                        .IsConcurrencyToken()
                        .HasColumnName("version");

                    b.HasKey("Id");

                    b.HasIndex("PublicationId");

                    b.HasIndex("TypeId");

                    b.ToTable("publicationcontributor");
                });

            modelBuilder.Entity("OpenScience.Data.Publications.Models.PublicationContributorIdentifier", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<int?>("OrganizationalSchemeId")
                        .HasColumnName("organizationalschemeid");

                    b.Property<int>("PublicationContributorId")
                        .HasColumnName("publicationcontributorid");

                    b.Property<int?>("SchemeId")
                        .HasColumnName("schemeid");

                    b.Property<string>("Value")
                        .HasColumnName("value");

                    b.Property<int>("Version")
                        .IsConcurrencyToken()
                        .HasColumnName("version");

                    b.HasKey("Id");

                    b.HasIndex("OrganizationalSchemeId");

                    b.HasIndex("PublicationContributorId");

                    b.HasIndex("SchemeId");

                    b.ToTable("publicationcontributoridentifier");
                });

            modelBuilder.Entity("OpenScience.Data.Publications.Models.PublicationCoverage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<int>("PublicationId")
                        .HasColumnName("publicationid");

                    b.Property<string>("Value")
                        .HasColumnName("value");

                    b.Property<int>("Version")
                        .IsConcurrencyToken()
                        .HasColumnName("version");

                    b.HasKey("Id");

                    b.HasIndex("PublicationId");

                    b.ToTable("publicationcoverage");
                });

            modelBuilder.Entity("OpenScience.Data.Publications.Models.PublicationCreator", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<string>("FirstName")
                        .HasColumnName("firstname");

                    b.Property<string>("Language")
                        .HasColumnName("language");

                    b.Property<string>("LastName")
                        .HasColumnName("lastname");

                    b.Property<int>("NameType")
                        .HasColumnName("nametype");

                    b.Property<int>("PublicationId")
                        .HasColumnName("publicationid");

                    b.Property<int>("Version")
                        .IsConcurrencyToken()
                        .HasColumnName("version");

                    b.HasKey("Id");

                    b.HasIndex("PublicationId");

                    b.ToTable("publicationcreator");
                });

            modelBuilder.Entity("OpenScience.Data.Publications.Models.PublicationCreatorAffiliation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<string>("InstitutionName")
                        .HasColumnName("institutionname");

                    b.Property<int>("PublicationCreatorId")
                        .HasColumnName("publicationcreatorid");

                    b.Property<int>("Version")
                        .IsConcurrencyToken()
                        .HasColumnName("version");

                    b.HasKey("Id");

                    b.HasIndex("PublicationCreatorId");

                    b.ToTable("publicationcreatoraffiliation");
                });

            modelBuilder.Entity("OpenScience.Data.Publications.Models.PublicationCreatorIdentifier", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<int>("PublicationCreatorId")
                        .HasColumnName("publicationcreatorid");

                    b.Property<int>("SchemeId")
                        .HasColumnName("schemeid");

                    b.Property<string>("Value")
                        .HasColumnName("value");

                    b.Property<int>("Version")
                        .IsConcurrencyToken()
                        .HasColumnName("version");

                    b.HasKey("Id");

                    b.HasIndex("PublicationCreatorId");

                    b.HasIndex("SchemeId");

                    b.ToTable("publicationcreatoridentifier");
                });

            modelBuilder.Entity("OpenScience.Data.Publications.Models.PublicationDate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<string>("Note")
                        .HasColumnName("note");

                    b.Property<int>("PublicationId")
                        .HasColumnName("publicationid");

                    b.Property<int>("Type")
                        .HasColumnName("type");

                    b.Property<DateTime>("Value")
                        .HasColumnName("value");

                    b.Property<int>("Version")
                        .IsConcurrencyToken()
                        .HasColumnName("version");

                    b.HasKey("Id");

                    b.HasIndex("PublicationId");

                    b.ToTable("publicationdate");
                });

            modelBuilder.Entity("OpenScience.Data.Publications.Models.PublicationDescription", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<int?>("LanguageId")
                        .HasColumnName("languageid");

                    b.Property<int>("PublicationId")
                        .HasColumnName("publicationid");

                    b.Property<string>("Value")
                        .HasColumnName("value");

                    b.Property<int>("Version")
                        .IsConcurrencyToken()
                        .HasColumnName("version");

                    b.HasKey("Id");

                    b.HasIndex("LanguageId");

                    b.HasIndex("PublicationId");

                    b.ToTable("publicationdescription");
                });

            modelBuilder.Entity("OpenScience.Data.Publications.Models.PublicationFile", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<int>("DbId")
                        .HasColumnName("dbid");

                    b.Property<string>("Hash")
                        .HasColumnName("hash");

                    b.Property<Guid>("Key")
                        .HasColumnName("key");

                    b.Property<string>("MimeType")
                        .HasColumnName("mimetype");

                    b.Property<string>("Name")
                        .HasColumnName("name");

                    b.Property<int>("PublicationId")
                        .HasColumnName("publicationid");

                    b.Property<long>("Size")
                        .HasColumnName("size");

                    b.HasKey("Id");

                    b.HasIndex("PublicationId");

                    b.ToTable("publicationfile");
                });

            modelBuilder.Entity("OpenScience.Data.Publications.Models.PublicationFileLocation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<string>("AccessRightsUri")
                        .HasColumnName("accessrightsuri");

                    b.Property<string>("FileUrl")
                        .HasColumnName("fileurl");

                    b.Property<string>("MimeType")
                        .HasColumnName("mimetype");

                    b.Property<int>("ObjectType")
                        .HasColumnName("objecttype");

                    b.Property<int>("PublicationId")
                        .HasColumnName("publicationid");

                    b.Property<int>("Version")
                        .IsConcurrencyToken()
                        .HasColumnName("version");

                    b.HasKey("Id");

                    b.HasIndex("PublicationId");

                    b.ToTable("publicationfilelocation");
                });

            modelBuilder.Entity("OpenScience.Data.Publications.Models.PublicationFormat", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<int>("PublicationId")
                        .HasColumnName("publicationid");

                    b.Property<string>("Value")
                        .HasColumnName("value");

                    b.Property<int>("Version")
                        .IsConcurrencyToken()
                        .HasColumnName("version");

                    b.HasKey("Id");

                    b.HasIndex("PublicationId");

                    b.ToTable("publicationformat");
                });

            modelBuilder.Entity("OpenScience.Data.Publications.Models.PublicationFundingReference", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<string>("AwardNumber")
                        .HasColumnName("awardnumber");

                    b.Property<string>("AwardTitle")
                        .HasColumnName("awardtitle");

                    b.Property<string>("AwardURI")
                        .HasColumnName("awarduri");

                    b.Property<string>("Identifier")
                        .HasColumnName("identifier");

                    b.Property<string>("Name")
                        .HasColumnName("name");

                    b.Property<int>("PublicationId")
                        .HasColumnName("publicationid");

                    b.Property<int?>("SchemeId")
                        .HasColumnName("schemeid");

                    b.Property<int>("Version")
                        .IsConcurrencyToken()
                        .HasColumnName("version");

                    b.HasKey("Id");

                    b.HasIndex("PublicationId");

                    b.HasIndex("SchemeId");

                    b.ToTable("publicationfundingreference");
                });

            modelBuilder.Entity("OpenScience.Data.Publications.Models.PublicationLanguage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<int>("LanguageId")
                        .HasColumnName("languageid");

                    b.Property<int>("PublicationId")
                        .HasColumnName("publicationid");

                    b.Property<int>("Version")
                        .IsConcurrencyToken()
                        .HasColumnName("version");

                    b.HasKey("Id");

                    b.HasIndex("LanguageId");

                    b.HasIndex("PublicationId");

                    b.ToTable("publicationlanguage");
                });

            modelBuilder.Entity("OpenScience.Data.Publications.Models.PublicationOriginDescription", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<string>("Altered")
                        .HasColumnName("altered");

                    b.Property<string>("BaseUrl")
                        .HasColumnName("baseurl");

                    b.Property<string>("Datestamp")
                        .HasColumnName("datestamp");

                    b.Property<DateTime>("HarvestDate")
                        .HasColumnName("harvestdate");

                    b.Property<string>("Identifier")
                        .HasColumnName("identifier");

                    b.Property<string>("MetadataNamespace")
                        .HasColumnName("metadatanamespace");

                    b.Property<string>("OriginDescription")
                        .HasColumnName("origindescription");

                    b.Property<int>("PublicationId")
                        .HasColumnName("publicationid");

                    b.Property<int>("Version")
                        .IsConcurrencyToken()
                        .HasColumnName("version");

                    b.HasKey("Id");

                    b.HasIndex("PublicationId")
                        .IsUnique();

                    b.ToTable("publicationorigindescription");
                });

            modelBuilder.Entity("OpenScience.Data.Publications.Models.PublicationPublisher", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<string>("Name")
                        .HasColumnName("name");

                    b.Property<int>("PublicationId")
                        .HasColumnName("publicationid");

                    b.Property<int>("Version")
                        .IsConcurrencyToken()
                        .HasColumnName("version");

                    b.HasKey("Id");

                    b.HasIndex("PublicationId");

                    b.ToTable("publicationpublisher");
                });

            modelBuilder.Entity("OpenScience.Data.Publications.Models.PublicationRelatedIdentifier", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<int>("PublicationId")
                        .HasColumnName("publicationid");

                    b.Property<string>("RelatedMetadataScheme")
                        .HasColumnName("relatedmetadatascheme");

                    b.Property<int>("RelationTypeId")
                        .HasColumnName("relationtypeid");

                    b.Property<int?>("ResourceTypeGeneralId")
                        .HasColumnName("resourcetypegeneralid");

                    b.Property<string>("SchemeType")
                        .HasColumnName("schemetype");

                    b.Property<string>("SchemeURI")
                        .HasColumnName("schemeuri");

                    b.Property<int>("TypeId")
                        .HasColumnName("typeid");

                    b.Property<string>("Value")
                        .HasColumnName("value");

                    b.Property<int>("Version")
                        .IsConcurrencyToken()
                        .HasColumnName("version");

                    b.HasKey("Id");

                    b.HasIndex("PublicationId");

                    b.HasIndex("RelationTypeId");

                    b.HasIndex("ResourceTypeGeneralId");

                    b.HasIndex("TypeId");

                    b.ToTable("publicationrelatedidentifier");
                });

            modelBuilder.Entity("OpenScience.Data.Publications.Models.PublicationSize", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<int>("PublicationId")
                        .HasColumnName("publicationid");

                    b.Property<string>("Value")
                        .HasColumnName("value");

                    b.Property<int>("Version")
                        .IsConcurrencyToken()
                        .HasColumnName("version");

                    b.HasKey("Id");

                    b.HasIndex("PublicationId");

                    b.ToTable("publicationsize");
                });

            modelBuilder.Entity("OpenScience.Data.Publications.Models.PublicationSource", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<int>("PublicationId")
                        .HasColumnName("publicationid");

                    b.Property<string>("Value")
                        .HasColumnName("value");

                    b.Property<int>("Version")
                        .IsConcurrencyToken()
                        .HasColumnName("version");

                    b.HasKey("Id");

                    b.HasIndex("PublicationId");

                    b.ToTable("publicationsource");
                });

            modelBuilder.Entity("OpenScience.Data.Publications.Models.PublicationSubject", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<int?>("LanguageId")
                        .HasColumnName("languageid");

                    b.Property<int>("PublicationId")
                        .HasColumnName("publicationid");

                    b.Property<string>("Value")
                        .HasColumnName("value");

                    b.Property<int>("Version")
                        .IsConcurrencyToken()
                        .HasColumnName("version");

                    b.HasKey("Id");

                    b.HasIndex("LanguageId");

                    b.HasIndex("PublicationId");

                    b.ToTable("publicationsubject");
                });

            modelBuilder.Entity("OpenScience.Data.Publications.Models.PublicationTitle", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<int?>("LanguageId")
                        .HasColumnName("languageid");

                    b.Property<int>("PublicationId")
                        .HasColumnName("publicationid");

                    b.Property<int?>("TypeId")
                        .HasColumnName("typeid");

                    b.Property<string>("Value")
                        .HasColumnName("value");

                    b.Property<int>("Version")
                        .IsConcurrencyToken()
                        .HasColumnName("version");

                    b.HasKey("Id");

                    b.HasIndex("LanguageId");

                    b.HasIndex("PublicationId");

                    b.HasIndex("TypeId");

                    b.ToTable("publicationtitle");
                });

            modelBuilder.Entity("OpenScience.Data.Users.Models.PasswordToken", b =>
                {
                    b.Property<string>("Value")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("value");

                    b.Property<DateTime>("ExpirationTime")
                        .HasColumnName("expirationtime");

                    b.Property<bool>("IsUsed")
                        .HasColumnName("isused");

                    b.Property<int>("UserId")
                        .HasColumnName("userid");

                    b.HasKey("Value");

                    b.HasIndex("UserId");

                    b.ToTable("passwordtoken");
                });

            modelBuilder.Entity("OpenScience.Data.Users.Models.Permission", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<string>("Alias")
                        .HasColumnName("alias");

                    b.Property<string>("Name")
                        .HasColumnName("name");

                    b.Property<int>("Version")
                        .IsConcurrencyToken()
                        .HasColumnName("version");

                    b.HasKey("Id");

                    b.ToTable("permission");
                });

            modelBuilder.Entity("OpenScience.Data.Users.Models.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<string>("Alias")
                        .HasColumnName("alias");

                    b.Property<string>("Name")
                        .HasColumnName("name");

                    b.Property<int>("Version")
                        .IsConcurrencyToken()
                        .HasColumnName("version");

                    b.HasKey("Id");

                    b.ToTable("role");
                });

            modelBuilder.Entity("OpenScience.Data.Users.Models.RolePermission", b =>
                {
                    b.Property<int>("RoleId")
                        .HasColumnName("roleid");

                    b.Property<int>("PermissionId")
                        .HasColumnName("permissionid");

                    b.HasKey("RoleId", "PermissionId");

                    b.ToTable("rolepermission");
                });

            modelBuilder.Entity("OpenScience.Data.Users.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnName("createdate");

                    b.Property<string>("Email")
                        .HasColumnName("email");

                    b.Property<string>("Fullname")
                        .HasColumnName("fullname");

                    b.Property<bool>("IsActive")
                        .HasColumnName("isactive");

                    b.Property<bool>("IsLocked")
                        .HasColumnName("islocked");

                    b.Property<string>("Orcid")
                        .HasColumnName("orcid");

                    b.Property<string>("PasswordHash")
                        .HasColumnName("passwordhash");

                    b.Property<string>("PasswordSalt")
                        .HasColumnName("passwordsalt");

                    b.Property<int>("RoleId")
                        .HasColumnName("roleid");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnName("updatedate");

                    b.Property<string>("Username")
                        .HasColumnName("username");

                    b.Property<int>("Version")
                        .IsConcurrencyToken()
                        .HasColumnName("version");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("user");
                });

            modelBuilder.Entity("OpenScience.Data.Users.Models.UserClassification", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnName("userid");

                    b.Property<int>("ClassificationId")
                        .HasColumnName("classificationid");

                    b.HasKey("UserId", "ClassificationId");

                    b.ToTable("userclassification");
                });

            modelBuilder.Entity("OpenScience.Data.Users.Models.UserInstitution", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnName("userid");

                    b.Property<int>("InstitutionId")
                        .HasColumnName("institutionid");

                    b.HasKey("UserId", "InstitutionId");

                    b.ToTable("userinstitution");
                });

            modelBuilder.Entity("OpenScience.Data.Users.Models.UserRole", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnName("userid");

                    b.Property<int>("RoleId")
                        .HasColumnName("roleid");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("userrole");
                });

            modelBuilder.Entity("OpenScience.Data.Classifications.Models.Classification", b =>
                {
                    b.HasOne("OpenScience.Data.Nomenclatures.Models.ResourceIdentifierType", "DefaultIdentifierType")
                        .WithMany()
                        .HasForeignKey("DefaultIdentifierTypeId");

                    b.HasOne("OpenScience.Data.Nomenclatures.Models.LicenseType", "DefaultLicenseCondition")
                        .WithMany()
                        .HasForeignKey("DefaultLicenseConditionId");

                    b.HasOne("OpenScience.Data.Nomenclatures.Models.ResourceType", "DefaultResourceType")
                        .WithMany()
                        .HasForeignKey("DefaultResourceTypeId");

                    b.HasOne("OpenScience.Data.Institutions.Models.Institution", "Organization")
                        .WithMany()
                        .HasForeignKey("OrganizationId");

                    b.HasOne("OpenScience.Data.Classifications.Models.Classification", "Parent")
                        .WithMany("Children")
                        .HasForeignKey("ParentId");
                });

            modelBuilder.Entity("OpenScience.Data.Classifications.Models.ClassificationClosure", b =>
                {
                    b.HasOne("OpenScience.Data.Classifications.Models.Classification", "Child")
                        .WithMany()
                        .HasForeignKey("ChildId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("OpenScience.Data.Classifications.Models.Classification", "Parent")
                        .WithMany()
                        .HasForeignKey("ParentId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("OpenScience.Data.Emails.Models.Email", b =>
                {
                    b.HasOne("OpenScience.Data.Nomenclatures.Models.EmailType", "Type")
                        .WithMany()
                        .HasForeignKey("TypeId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("OpenScience.Data.Emails.Models.EmailAddressee", b =>
                {
                    b.HasOne("OpenScience.Data.Emails.Models.Email", "Email")
                        .WithMany("Addressees")
                        .HasForeignKey("EmailId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("OpenScience.Data.Publications.Models.Publication", b =>
                {
                    b.HasOne("OpenScience.Data.Nomenclatures.Models.AccessRight", "AccessRight")
                        .WithMany()
                        .HasForeignKey("AccessRightId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("OpenScience.Data.Users.Models.User", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedByUserId");

                    b.HasOne("OpenScience.Data.Nomenclatures.Models.ResourceIdentifierType", "IdentifierType")
                        .WithMany()
                        .HasForeignKey("IdentifierTypeId");

                    b.HasOne("OpenScience.Data.Nomenclatures.Models.LicenseType", "LicenseType")
                        .WithMany()
                        .HasForeignKey("LicenseTypeId");

                    b.HasOne("OpenScience.Data.Institutions.Models.Institution", "ModeratorInstitution")
                        .WithMany()
                        .HasForeignKey("ModeratorInstitutionId");

                    b.HasOne("OpenScience.Data.Nomenclatures.Models.ResourceType", "ResourceType")
                        .WithMany()
                        .HasForeignKey("ResourceTypeId");
                });

            modelBuilder.Entity("OpenScience.Data.Publications.Models.PublicationAlternateIdentifier", b =>
                {
                    b.HasOne("OpenScience.Data.Publications.Models.Publication", "Publication")
                        .WithMany("AlternateIdentifiers")
                        .HasForeignKey("PublicationId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("OpenScience.Data.Nomenclatures.Models.ResourceIdentifierType", "Type")
                        .WithMany()
                        .HasForeignKey("TypeId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("OpenScience.Data.Publications.Models.PublicationAudience", b =>
                {
                    b.HasOne("OpenScience.Data.Publications.Models.Publication", "Publication")
                        .WithMany("Audiences")
                        .HasForeignKey("PublicationId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("OpenScience.Data.Nomenclatures.Models.AudienceType", "Type")
                        .WithMany()
                        .HasForeignKey("TypeId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("OpenScience.Data.Publications.Models.PublicationClassification", b =>
                {
                    b.HasOne("OpenScience.Data.Classifications.Models.Classification", "Classification")
                        .WithMany("Publications")
                        .HasForeignKey("ClassificationId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("OpenScience.Data.Publications.Models.Publication", "Publication")
                        .WithMany("Classifications")
                        .HasForeignKey("PublicationId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("OpenScience.Data.Publications.Models.PublicationContributor", b =>
                {
                    b.HasOne("OpenScience.Data.Publications.Models.Publication", "Publication")
                        .WithMany("Contributors")
                        .HasForeignKey("PublicationId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("OpenScience.Data.Nomenclatures.Models.ContributorType", "Type")
                        .WithMany()
                        .HasForeignKey("TypeId");
                });

            modelBuilder.Entity("OpenScience.Data.Publications.Models.PublicationContributorIdentifier", b =>
                {
                    b.HasOne("OpenScience.Data.Nomenclatures.Models.OrganizationalIdentifierScheme", "OrganizationalScheme")
                        .WithMany()
                        .HasForeignKey("OrganizationalSchemeId");

                    b.HasOne("OpenScience.Data.Publications.Models.PublicationContributor", "PublicationContributor")
                        .WithMany("Identifiers")
                        .HasForeignKey("PublicationContributorId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("OpenScience.Data.Nomenclatures.Models.NameIdentifierScheme", "Scheme")
                        .WithMany()
                        .HasForeignKey("SchemeId");
                });

            modelBuilder.Entity("OpenScience.Data.Publications.Models.PublicationCoverage", b =>
                {
                    b.HasOne("OpenScience.Data.Publications.Models.Publication", "Publication")
                        .WithMany("Coverages")
                        .HasForeignKey("PublicationId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("OpenScience.Data.Publications.Models.PublicationCreator", b =>
                {
                    b.HasOne("OpenScience.Data.Publications.Models.Publication", "Publication")
                        .WithMany("Creators")
                        .HasForeignKey("PublicationId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("OpenScience.Data.Publications.Models.PublicationCreatorAffiliation", b =>
                {
                    b.HasOne("OpenScience.Data.Publications.Models.PublicationCreator", "PublicationCreator")
                        .WithMany("Affiliations")
                        .HasForeignKey("PublicationCreatorId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("OpenScience.Data.Publications.Models.PublicationCreatorIdentifier", b =>
                {
                    b.HasOne("OpenScience.Data.Publications.Models.PublicationCreator", "PublicationCreator")
                        .WithMany("Identifiers")
                        .HasForeignKey("PublicationCreatorId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("OpenScience.Data.Nomenclatures.Models.NameIdentifierScheme", "Scheme")
                        .WithMany()
                        .HasForeignKey("SchemeId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("OpenScience.Data.Publications.Models.PublicationDate", b =>
                {
                    b.HasOne("OpenScience.Data.Publications.Models.Publication", "Publication")
                        .WithMany()
                        .HasForeignKey("PublicationId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("OpenScience.Data.Publications.Models.PublicationDescription", b =>
                {
                    b.HasOne("OpenScience.Data.Nomenclatures.Models.Language", "Language")
                        .WithMany()
                        .HasForeignKey("LanguageId");

                    b.HasOne("OpenScience.Data.Publications.Models.Publication", "Publication")
                        .WithMany("Descriptions")
                        .HasForeignKey("PublicationId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("OpenScience.Data.Publications.Models.PublicationFile", b =>
                {
                    b.HasOne("OpenScience.Data.Publications.Models.Publication", "Publication")
                        .WithMany("Files")
                        .HasForeignKey("PublicationId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("OpenScience.Data.Publications.Models.PublicationFileLocation", b =>
                {
                    b.HasOne("OpenScience.Data.Publications.Models.Publication", "Publication")
                        .WithMany("FileLocations")
                        .HasForeignKey("PublicationId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("OpenScience.Data.Publications.Models.PublicationFormat", b =>
                {
                    b.HasOne("OpenScience.Data.Publications.Models.Publication", "Publication")
                        .WithMany("Formats")
                        .HasForeignKey("PublicationId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("OpenScience.Data.Publications.Models.PublicationFundingReference", b =>
                {
                    b.HasOne("OpenScience.Data.Publications.Models.Publication", "Publication")
                        .WithMany("FundingReferences")
                        .HasForeignKey("PublicationId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("OpenScience.Data.Nomenclatures.Models.OrganizationalIdentifierScheme", "Scheme")
                        .WithMany()
                        .HasForeignKey("SchemeId");
                });

            modelBuilder.Entity("OpenScience.Data.Publications.Models.PublicationLanguage", b =>
                {
                    b.HasOne("OpenScience.Data.Nomenclatures.Models.Language", "Language")
                        .WithMany()
                        .HasForeignKey("LanguageId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("OpenScience.Data.Publications.Models.Publication", "Publication")
                        .WithMany("Languages")
                        .HasForeignKey("PublicationId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("OpenScience.Data.Publications.Models.PublicationOriginDescription", b =>
                {
                    b.HasOne("OpenScience.Data.Publications.Models.Publication", "Publication")
                        .WithOne("OriginDescription")
                        .HasForeignKey("OpenScience.Data.Publications.Models.PublicationOriginDescription", "PublicationId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("OpenScience.Data.Publications.Models.PublicationPublisher", b =>
                {
                    b.HasOne("OpenScience.Data.Publications.Models.Publication", "Publication")
                        .WithMany("Publishers")
                        .HasForeignKey("PublicationId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("OpenScience.Data.Publications.Models.PublicationRelatedIdentifier", b =>
                {
                    b.HasOne("OpenScience.Data.Publications.Models.Publication", "Publication")
                        .WithMany("RelatedIdentifiers")
                        .HasForeignKey("PublicationId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("OpenScience.Data.Nomenclatures.Models.RelationType", "RelationType")
                        .WithMany()
                        .HasForeignKey("RelationTypeId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("OpenScience.Data.Nomenclatures.Models.ResourceTypeGeneral", "ResourceTypeGeneral")
                        .WithMany()
                        .HasForeignKey("ResourceTypeGeneralId");

                    b.HasOne("OpenScience.Data.Nomenclatures.Models.ResourceIdentifierType", "Type")
                        .WithMany()
                        .HasForeignKey("TypeId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("OpenScience.Data.Publications.Models.PublicationSize", b =>
                {
                    b.HasOne("OpenScience.Data.Publications.Models.Publication", "Publication")
                        .WithMany("Sizes")
                        .HasForeignKey("PublicationId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("OpenScience.Data.Publications.Models.PublicationSource", b =>
                {
                    b.HasOne("OpenScience.Data.Publications.Models.Publication", "Publication")
                        .WithMany("Sources")
                        .HasForeignKey("PublicationId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("OpenScience.Data.Publications.Models.PublicationSubject", b =>
                {
                    b.HasOne("OpenScience.Data.Nomenclatures.Models.Language", "Language")
                        .WithMany()
                        .HasForeignKey("LanguageId");

                    b.HasOne("OpenScience.Data.Publications.Models.Publication", "Publication")
                        .WithMany("Subjects")
                        .HasForeignKey("PublicationId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("OpenScience.Data.Publications.Models.PublicationTitle", b =>
                {
                    b.HasOne("OpenScience.Data.Nomenclatures.Models.Language", "Language")
                        .WithMany()
                        .HasForeignKey("LanguageId");

                    b.HasOne("OpenScience.Data.Publications.Models.Publication", "Publication")
                        .WithMany("Titles")
                        .HasForeignKey("PublicationId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("OpenScience.Data.Nomenclatures.Models.TitleType", "Type")
                        .WithMany()
                        .HasForeignKey("TypeId");
                });

            modelBuilder.Entity("OpenScience.Data.Users.Models.PasswordToken", b =>
                {
                    b.HasOne("OpenScience.Data.Users.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("OpenScience.Data.Users.Models.RolePermission", b =>
                {
                    b.HasOne("OpenScience.Data.Users.Models.Role")
                        .WithMany("Permissions")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("OpenScience.Data.Users.Models.User", b =>
                {
                    b.HasOne("OpenScience.Data.Users.Models.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("OpenScience.Data.Users.Models.UserInstitution", b =>
                {
                    b.HasOne("OpenScience.Data.Users.Models.User")
                        .WithMany("Institutions")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("OpenScience.Data.Users.Models.UserRole", b =>
                {
                    b.HasOne("OpenScience.Data.Users.Models.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict);
                });
#pragma warning restore 612, 618
        }
    }
}
